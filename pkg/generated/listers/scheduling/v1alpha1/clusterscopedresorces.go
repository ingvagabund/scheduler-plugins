/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/scheduler-plugins/pkg/apis/scheduling/v1alpha1"
)

// ClusterScopedResorcesLister helps list ClusterScopedResorceses.
// All objects returned here must be treated as read-only.
type ClusterScopedResorcesLister interface {
	// List lists all ClusterScopedResorceses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterScopedResorces, err error)
	// ClusterScopedResorceses returns an object that can list and get ClusterScopedResorceses.
	ClusterScopedResorceses(namespace string) ClusterScopedResorcesNamespaceLister
	ClusterScopedResorcesListerExpansion
}

// clusterScopedResorcesLister implements the ClusterScopedResorcesLister interface.
type clusterScopedResorcesLister struct {
	indexer cache.Indexer
}

// NewClusterScopedResorcesLister returns a new ClusterScopedResorcesLister.
func NewClusterScopedResorcesLister(indexer cache.Indexer) ClusterScopedResorcesLister {
	return &clusterScopedResorcesLister{indexer: indexer}
}

// List lists all ClusterScopedResorceses in the indexer.
func (s *clusterScopedResorcesLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterScopedResorces, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterScopedResorces))
	})
	return ret, err
}

// ClusterScopedResorceses returns an object that can list and get ClusterScopedResorceses.
func (s *clusterScopedResorcesLister) ClusterScopedResorceses(namespace string) ClusterScopedResorcesNamespaceLister {
	return clusterScopedResorcesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterScopedResorcesNamespaceLister helps list and get ClusterScopedResorceses.
// All objects returned here must be treated as read-only.
type ClusterScopedResorcesNamespaceLister interface {
	// List lists all ClusterScopedResorceses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterScopedResorces, err error)
	// Get retrieves the ClusterScopedResorces from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterScopedResorces, error)
	ClusterScopedResorcesNamespaceListerExpansion
}

// clusterScopedResorcesNamespaceLister implements the ClusterScopedResorcesNamespaceLister
// interface.
type clusterScopedResorcesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterScopedResorceses in the indexer for a given namespace.
func (s clusterScopedResorcesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterScopedResorces, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterScopedResorces))
	})
	return ret, err
}

// Get retrieves the ClusterScopedResorces from the indexer for a given namespace and name.
func (s clusterScopedResorcesNamespaceLister) Get(name string) (*v1alpha1.ClusterScopedResorces, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterscopedresorces"), name)
	}
	return obj.(*v1alpha1.ClusterScopedResorces), nil
}
